package pl.edu.pwr.student.djablonski.kontroler.GUI;

import pl.edu.pwr.student.djablonski.database.context.Context;
import pl.edu.pwr.student.djablonski.database.data.Kontroler;
import pl.edu.pwr.student.djablonski.database.data.Status;
import pl.edu.pwr.student.djablonski.database.data.Zgloszenie;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class Zlecenia extends JPanel {
    private JTable zlecenieTable;
    private JButton podsumowanieButton;
    private JPanel main;

    public Zlecenia(Kontroler k) {
        $$$setupUI$$$();
        try {
            List<Zgloszenie> zgloszenia = Context.daoZgloszenie.readAllBy("id_kontrolera", k.id());
            DefaultTableModel tmz = (DefaultTableModel) zlecenieTable.getModel();

            for (Zgloszenie z : zgloszenia) {
                if (z.getStatus().equals(Status.przyjete)) {
                    tmz.addRow(z.toTableRow());
                }
            }
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
        podsumowanieButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (zlecenieTable.getSelectedRow() != -1) {
                    DefaultTableModel tmz = (DefaultTableModel) zlecenieTable.getModel();
                    Podsumowanie.start((Integer) zlecenieTable.getValueAt(zlecenieTable.getSelectedRow(), 0), tmz, zlecenieTable.getSelectedRow());
                }
            }
        });
    }

    public static void start(Kontroler k) {
        JFrame frame = new JFrame("Zlecenia");
        frame.setContentPane(new Zlecenia(k).main);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        DefaultTableModel tmz = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tmz.addColumn("Numer ZgÅ‚oszenia");
        tmz.addColumn("Status");
        tmz.addColumn("Data");

        zlecenieTable = new JTable(tmz);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        main = new JPanel();
        main.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        podsumowanieButton = new JButton();
        podsumowanieButton.setText("Podsumowanie");
        main.add(podsumowanieButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        main.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(zlecenieTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

}
